using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.IO;

public class KeyGenerator
{
    public static string GenerateKey(int keySize)
    {
        byte[] keyBytes = new byte[keySize / 8];
        
        using (var rng = new RNGCryptoServiceProvider())
        {
            rng.GetBytes(keyBytes);
        }

        return Convert.ToBase64String(keyBytes);
    }
}

public class PasswordEntry
{
    public string AccountName { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public string URL { get; set; }
    public string Notes { get; set; }
}

public class PasswordManager
{
    private List<PasswordEntry> passwordEntries;
    private const string Key = "GeneratedKeyHere"; // Replace "GeneratedKeyHere" with the newKey generated by KeyGenerator

    public PasswordManager()
    {
        passwordEntries = new List<PasswordEntry>();
    }

    public void AddEntry(PasswordEntry entry)
    {
        passwordEntries.Add(entry);
    }

    public void RemoveEntry(PasswordEntry entry)
    {
        passwordEntries.Remove(entry);
    }

    public void UpdateEntry(PasswordEntry entry)
    {
        int index = passwordEntries.FindIndex(e => e.AccountName == entry.AccountName);
        passwordEntries[index] = entry;
    }

    public void DisplayEntries()
    {
        foreach (var entry in passwordEntries)
        {
            Console.WriteLine($"Account: {entry.AccountName}");
            Console.WriteLine($"Username: {entry.Username}");
            Console.WriteLine($"Password: {entry.Password}");
            Console.WriteLine($"URL: {entry.URL}");
            Console.WriteLine($"Notes: {entry.Notes}");
            Console.WriteLine();
        }
    }

    public string GenerateStrongPassword(int length)
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_-+=<>?";
        StringBuilder sb = new StringBuilder();
        using (var rng = new RNGCryptoServiceProvider())
        {
            byte[] uintBuffer = new byte[sizeof(uint)];

            while (length-- > 0)
            {
                rng.GetBytes(uintBuffer);
                uint num = BitConverter.ToUInt32(uintBuffer, 0);
                sb.Append(validChars[(int)(num % (uint)validChars.Length)]);
            }
        }

        return sb.ToString();
    }
}

public class EncryptionManager
{
    private const int KeySize = 256; 

    public static string Encrypt(string plainText)
    {
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Encoding.UTF8.GetBytes(KeyGenerator.GenerateKey(KeySize));
            aesAlg.IV = new byte[16]; 

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            byte[] encryptedBytes;

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    encryptedBytes = msEncrypt.ToArray();
                }
            }

            return Convert.ToBase64String(encryptedBytes);
        }
    }

    public static string Decrypt(string cipherText)
    {
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Encoding.UTF8.GetBytes(KeyGenerator.GenerateKey(KeySize));
            aesAlg.IV = new byte[16]; 

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            byte[] cipherBytes = Convert.FromBase64String(cipherText);
            string plaintext = null;

            using (MemoryStream msDecrypt = new MemoryStream(cipherBytes))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        plaintext = srDecrypt.ReadToEnd();
                    }
                }
            }

            return plaintext;
        }
    }
}

public class UserInterface
{
    private PasswordManager passwordManager;

    public UserInterface(PasswordManager manager)
    {
        passwordManager = manager;
    }

    public void DisplayMenu()
    {
        Console.WriteLine("1. Add Password Entry");
        Console.WriteLine("2. Remove Password Entry");
        Console.WriteLine("3. Update Password Entry");
        Console.WriteLine("4. View Password Entries");
        Console.WriteLine("5. Generate Strong Password");
        Console.WriteLine("6. Exit");
    }

    public void Run()
    {
        bool running = true;
        while (running)
        {
            DisplayMenu();
            Console.Write("Enter your choice: ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddPasswordEntry();
                    break;
                case "2":
                    RemovePasswordEntry();
                    break;
                case "3":
                    UpdatePasswordEntry();
                    break;
                case "4":
                    ViewPasswordEntries();
                    break;
                case "5":
                    GenerateStrongPassword();
                    break;
                case "6":
                    running = false;
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private void AddPasswordEntry()
    {
        Console.WriteLine("Enter account name:");
        string accountName = Console.ReadLine();
        Console.WriteLine("Enter username:");
        string username = Console.ReadLine();
        Console.WriteLine("Enter password:");
        string password = Console.ReadLine();
        Console.WriteLine("Enter URL:");
        string url = Console.ReadLine();
        Console.WriteLine("Enter notes:");
        string notes = Console.ReadLine();

        PasswordEntry entry = new PasswordEntry
        {
            AccountName = accountName,
            Username = username,
            Password = EncryptionManager.Encrypt(password),
            URL = url,
            Notes = notes
        };

        passwordManager.AddEntry(entry);
        Console.WriteLine("Password entry added successfully.");
    }

    private void RemovePasswordEntry()
    {
        Console.WriteLine("Enter account name to remove:");
        string accountName = Console.ReadLine();

        var entryToRemove = passwordManager.Entries.Find(e => e.AccountName == accountName);
        if (entryToRemove != null)
        {
            passwordManager.RemoveEntry(entryToRemove);
            Console.WriteLine("Password entry removed successfully.");
        }
        else
        {
            Console.WriteLine("No password entry found with the provided account name.");
        }
    }

    private void UpdatePasswordEntry()
    {
        Console.WriteLine("Enter account name to update:");
        string accountName = Console.ReadLine();

        var entryToUpdate = passwordManager.Entries.Find(e => e.AccountName == accountName);
        if (entryToUpdate != null)
        {
            Console.WriteLine("Enter new username (leave blank to keep current):");
            string newUsername = Console.ReadLine();
            if (!string.IsNullOrEmpty(newUsername))
            {
                entryToUpdate.Username = newUsername;
            }

            Console.WriteLine("Enter new password (leave blank to keep current):");
            string newPassword = Console.ReadLine();
            if (!string.IsNullOrEmpty(newPassword))
            {
                entryToUpdate.Password = EncryptionManager.Encrypt(newPassword);
            }

            Console.WriteLine("Enter new URL (leave blank to keep current):");
            string newUrl = Console.ReadLine();
            if (!string.IsNullOrEmpty(newUrl))
            {
                entryToUpdate.URL = newUrl;
            }

            Console.WriteLine("Enter new notes (leave blank to keep current):");
            string newNotes = Console.ReadLine();
            if (!string.IsNullOrEmpty(newNotes))
            {
                entryToUpdate.Notes = newNotes;
            }

            passwordManager.UpdateEntry(entryToUpdate);
            Console.WriteLine("Password entry updated successfully.");
        }
        else
        {
            Console.WriteLine("No password entry found with the provided account name.");
        }
    }

    private void ViewPasswordEntries()
    {
        passwordManager.DisplayEntries();
    }

    private void GenerateStrongPassword()
    {
        Console.WriteLine("Enter length of the password:");
        if (int.TryParse(Console.ReadLine(), out int length))
        {
            string strongPassword = passwordManager.GenerateStrongPassword(length);
            Console.WriteLine($"Generated Strong Password: {strongPassword}");
        }
        else
        {
            Console.WriteLine("Invalid length. Please enter a valid integer.");
        }
    }
}

public class PasswordStrengthChecker
{
    public static bool IsStrongPassword(string password)
    {
        if (password.Length < 8)
            return false;

        bool containsUpperCase = false;
        bool containsLowerCase = false;
        bool containsDigit = false;
        bool containsSpecialCharacter = false;

        foreach (char c in password)
        {
            if (char.IsUpper(c))
                containsUpperCase = true;
            else if (char.IsLower(c))
                containsLowerCase = true;
            else if (char.IsDigit(c))
                containsDigit = true;
            else if (!char.IsLetterOrDigit(c) && !char.IsWhiteSpace(c))
                containsSpecialCharacter = true;
        }

        if (!(containsUpperCase && containsLowerCase && containsDigit && containsSpecialCharacter))
            return false;

        if (HasRepeatedCharacters(password))
            return false;

        if (HasCommonPatterns(password))
            return false;

        return true;
    }

    private static bool HasRepeatedCharacters(string password)
    {
        for (int i = 0; i < password.Length - 1; i++)
        {
            if (password[i] == password[i + 1])
                return true;
        }
        return false;
    }

    private static bool HasCommonPatterns(string password)
    {
        List<string> commonPatterns = new List<string>
        {
            "123", "abc", "qwerty", "password", "123456"
        };

        foreach (string pattern in commonPatterns)
        {
            if (password.ToLower().Contains(pattern))
                return true;
        }
        return false;
    }
}

public class PasswordHistory
{
    private List<string> passwordHistory;

    public PasswordHistory()
    {
        passwordHistory = new List<string>();
    }

    public void AddPasswordToHistory(string password)
    {
        passwordHistory.Add(password);
    }

    public bool IsPasswordInHistory(string password)
    {
        return passwordHistory.Contains(password);
    }
}

class Program
{
    static void Main(string[] args)
    {
        PasswordManager manager = new PasswordManager();
        UserInterface ui = new UserInterface(manager);
        ui.Run();
    }
}
